"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// mock console output streams
console.error = globals_1.jest.fn();
console.info = globals_1.jest.fn();
console.log = globals_1.jest.fn();
console.warn = globals_1.jest.fn();
const testLogMessage = "this is test log message";
const testCorrelationToken = "this is correlation id";
const env = process.env;
const log_1 = require("./log");
(0, globals_1.beforeEach)(() => {
    globals_1.jest.resetModules();
    globals_1.jest.clearAllMocks();
    process.env = { ...env };
});
(0, globals_1.afterEach)(() => {
    process.env = env;
});
globals_1.test.each `
LOGLEVEL    |expectedLogMethods 
${'DEBUG'}  |${['logdebug', 'loginfo', 'logwarn', 'logerror', 'logcrit']}
${'INFO'}   |${['loginfo', 'logwarn', 'logerror', 'logcrit']}
${'WARN'}   |${['logwarn', 'logerror', 'logcrit']}
${'ERROR'}  |${['logerror', 'logcrit']}
${'CRIT'}   |${['logcrit']}
    `("If LOGLEVEL=$LOGLEVEL then $expectedLogMethods methods are active", ({ LOGLEVEL, expectedLogMethods }) => {
    //ARRANGE
    process.env.LOGLEVEL = LOGLEVEL;
    const log = new log_1.Log(testCorrelationToken);
    // ACT
    log.debug(testLogMessage);
    log.info(testLogMessage);
    log.warn(testLogMessage);
    log.error(testLogMessage);
    log.crit(testLogMessage);
    // ASSERT logdebug
    if (expectedLogMethods.includes('logdebug')) {
        (0, globals_1.expect)(console.log).toBeCalledTimes(1);
        (0, globals_1.expect)(console.log).toBeCalledWith({ "0": `'${testLogMessage}'`, "correlation": testCorrelationToken, "loglevel": "DEBUG" });
    }
    else {
        (0, globals_1.expect)(console.log).toBeCalledTimes(0);
    }
    // ASSERT loginfo
    if (expectedLogMethods.includes('loginfo')) {
        (0, globals_1.expect)(console.info).toBeCalledTimes(1);
        (0, globals_1.expect)(console.info).toBeCalledWith({ "0": `'${testLogMessage}'`, "correlation": testCorrelationToken, "loglevel": "INFO" });
    }
    else {
        (0, globals_1.expect)(console.info).toBeCalledTimes(0);
    }
    // ASSERT logwarn
    if (expectedLogMethods.includes('logwarn')) {
        (0, globals_1.expect)(console.warn).toBeCalledTimes(1);
        (0, globals_1.expect)(console.warn).toBeCalledWith({ "0": `'${testLogMessage}'`, "correlation": testCorrelationToken, "loglevel": "WARN" });
    }
    else {
        (0, globals_1.expect)(console.warn).toBeCalledTimes(0);
    }
    // ASSERT logerror
    (0, globals_1.expect)(console.error).toBeCalledTimes(expectedLogMethods.includes('logerror')
        && expectedLogMethods.includes('logcrit') ? 2
        : expectedLogMethods.includes('logerror') ? 1
            : expectedLogMethods.includes('logcrit') ? 1 : 0);
    if (expectedLogMethods.includes('logerror')) {
        (0, globals_1.expect)(console.error).toBeCalledWith({ "0": `'${testLogMessage}'`, "correlation": testCorrelationToken, "loglevel": "ERROR" });
    }
    // ASSERT logcrit
    if (expectedLogMethods.includes('logcrit')) {
        (0, globals_1.expect)(console.error).toBeCalledWith({ "0": `'${testLogMessage}'`, "correlation": testCorrelationToken, "loglevel": "CRIT" });
    }
});
(0, globals_1.test)("if not set_correlation_token prior log* call 'UNKNOWN' is used", () => {
    const log = new log_1.Log(undefined); // no correlation_id is set
    log.warn(testLogMessage);
    (0, globals_1.expect)(console.warn).toBeCalledTimes(1);
    (0, globals_1.expect)(console.warn).lastCalledWith({ "0": `'${testLogMessage}'`, "correlation": "UNKNOWN", "loglevel": "WARN" });
});
(0, globals_1.test)("if not LOGLEVEL default loglevel is WARN", () => {
    process.env.LOGLEVEL = undefined;
    const log = new log_1.Log({}); // no correlation_id is set
    log.debug(testLogMessage);
    log.info(testLogMessage);
    log.warn(testLogMessage);
    log.error(testLogMessage);
    log.crit(testLogMessage);
    (0, globals_1.expect)(console.info).toBeCalledTimes(0);
    (0, globals_1.expect)(console.log).toBeCalledTimes(0);
    (0, globals_1.expect)(console.warn).toBeCalledTimes(1);
    (0, globals_1.expect)(console.error).toBeCalledTimes(2); //1 for error, 1 for crit
    (0, globals_1.expect)(console.warn).nthCalledWith(1, { "0": `'${testLogMessage}'`, "correlation": "UNKNOWN", "loglevel": "WARN" });
    (0, globals_1.expect)(console.error).nthCalledWith(1, { "0": `'${testLogMessage}'`, "correlation": "UNKNOWN", "loglevel": "ERROR" });
    (0, globals_1.expect)(console.error).nthCalledWith(2, { "0": `'${testLogMessage}'`, "correlation": "UNKNOWN", "loglevel": "CRIT" });
});
const expectedCorrelationToken = 'THE TEST CORELLATION ID';
(0, globals_1.describe)('setting correlation id', () => {
    (0, globals_1.test)('by passing plain string', () => {
        const log = new log_1.Log(expectedCorrelationToken);
        (0, globals_1.expect)(log.correlation_id).toBe(expectedCorrelationToken);
    });
    (0, globals_1.test)('by passing String(\'...\')', () => {
        const log = new log_1.Log(String(expectedCorrelationToken));
        (0, globals_1.expect)(log.correlation_id).toBe(expectedCorrelationToken);
    });
    (0, globals_1.test)('by passing new String(\'...\')', () => {
        const log = new log_1.Log(new String(expectedCorrelationToken));
        (0, globals_1.expect)(log.correlation_id).toBe(expectedCorrelationToken);
    });
    (0, globals_1.test)('by passing object contining `correlation_token: sting`', () => {
        const log = new log_1.Log({ correlation_token: expectedCorrelationToken, someOtherProp: 'will not be used' });
        (0, globals_1.expect)(log.correlation_id).toBe(expectedCorrelationToken);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbG9nLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBb0Y7QUFFcEYsOEJBQThCO0FBQzlCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBQ3pCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBRXhCLE1BQU0sY0FBYyxHQUFHLDBCQUEwQixDQUFBO0FBQ2pELE1BQU0sb0JBQW9CLEdBQUcsd0JBQXdCLENBQUE7QUFDckQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQTtBQUV2QiwrQkFBNEI7QUFFNUIsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtJQUNaLGNBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQTtJQUNuQixjQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDcEIsT0FBTyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUE7QUFDNUIsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFBLG1CQUFTLEVBQUMsR0FBRyxFQUFFO0lBQ1gsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7QUFDckIsQ0FBQyxDQUFDLENBQUE7QUFFRixjQUFJLENBQUMsSUFBSSxDQUFBOztFQUVQLE9BQU8sTUFBTSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUM7RUFDdEUsTUFBTSxPQUFPLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDO0VBQzFELE1BQU0sT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDO0VBQy9DLE9BQU8sTUFBTSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUM7RUFDcEMsTUFBTSxPQUFPLENBQUMsU0FBUyxDQUFDO0tBQ3JCLENBQUMsbUVBQW1FLEVBQ3JFLENBQUMsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsRUFBRSxFQUFFO0lBQ2pDLFNBQVM7SUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxRQUFrQixDQUFDO0lBQzFDLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUE7SUFFekMsTUFBTTtJQUNOLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN6QixHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3pCLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUV6QixrQkFBa0I7SUFDbEIsSUFBSyxrQkFBK0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDdkQsSUFBQSxnQkFBTSxFQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdEMsSUFBQSxnQkFBTSxFQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxjQUFjLEdBQUcsRUFBRSxhQUFhLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7S0FDL0g7U0FBTTtRQUNILElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ3pDO0lBQ0QsaUJBQWlCO0lBQ2pCLElBQUssa0JBQStCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQ3RELElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3ZDLElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksY0FBYyxHQUFHLEVBQUUsYUFBYSxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0tBQy9IO1NBQU07UUFDSCxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUMxQztJQUVELGlCQUFpQjtJQUNqQixJQUFLLGtCQUErQixDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUN0RCxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN2QyxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLGNBQWMsR0FBRyxFQUFFLGFBQWEsRUFBRSxvQkFBb0IsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtLQUMvSDtTQUFNO1FBQ0gsSUFBQSxnQkFBTSxFQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDMUM7SUFFRCxrQkFBa0I7SUFDbEIsSUFBQSxnQkFBTSxFQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUUsa0JBQStCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztXQUNuRixrQkFBK0IsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFFLGtCQUErQixDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RCxDQUFDLENBQUUsa0JBQStCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3ZFLElBQUssa0JBQStCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3ZELElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksY0FBYyxHQUFHLEVBQUUsYUFBYSxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO0tBQ2pJO0lBQ0QsaUJBQWlCO0lBQ2pCLElBQUssa0JBQStCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQ3RELElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksY0FBYyxHQUFHLEVBQUUsYUFBYSxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0tBQ2hJO0FBQ0wsQ0FBQyxDQUFDLENBQUE7QUFDTixJQUFBLGNBQUksRUFBQyxnRUFBZ0UsRUFBRSxHQUFHLEVBQUU7SUFDeEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFHLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQywyQkFBMkI7SUFDMUQsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUN4QixJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN2QyxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLGNBQWMsR0FBRyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUE7QUFDckgsQ0FBQyxDQUFDLENBQUE7QUFDRixJQUFBLGNBQUksRUFBQywwQ0FBMEMsRUFBRSxHQUFHLEVBQUU7SUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFBO0lBQ2hDLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0lBRXBELEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDekIsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQ3hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDekIsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUV4QixJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN2QyxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN0QyxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN2QyxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLHlCQUF5QjtJQUNsRSxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxjQUFjLEdBQUcsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQ25ILElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLGNBQWMsR0FBRyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDckgsSUFBQSxnQkFBTSxFQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksY0FBYyxHQUFHLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtBQUN4SCxDQUFDLENBQUMsQ0FBQTtBQUVGLE1BQU0sd0JBQXdCLEdBQUcseUJBQXlCLENBQUE7QUFDMUQsSUFBQSxrQkFBUSxFQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxJQUFBLGNBQUksRUFBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtRQUM3QyxJQUFBLGdCQUFNLEVBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzVELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxjQUFJLEVBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO1FBQ3RDLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUE7UUFDckQsSUFBQSxnQkFBTSxFQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsY0FBSSxFQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUE7UUFDekQsSUFBQSxnQkFBTSxFQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsY0FBSSxFQUFDLHdEQUF3RCxFQUFFLEdBQUcsRUFBRTtRQUNsRSxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsQ0FBQyxFQUFDLGlCQUFpQixFQUFFLHdCQUF3QixFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBQyxDQUFDLENBQUE7UUFDckcsSUFBQSxnQkFBTSxFQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIn0=