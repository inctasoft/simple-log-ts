"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const log_1 = require("../src/log");
// mock console output streams
console.error = globals_1.jest.fn();
console.info = globals_1.jest.fn();
console.log = globals_1.jest.fn();
console.warn = globals_1.jest.fn();
const testLogMessage = "this is test log message";
const testCorrelationToken = "this is correlation id";
const env = process.env;
(0, globals_1.beforeEach)(() => {
    process.env = { ...env };
});
globals_1.test.each `
LOGLEVEL    |expectedLogMethods 
${'DEBUG'}  |${['logdebug', 'loginfo', 'logwarn', 'logerror', 'logcrit']}
${'INFO'}   |${['loginfo', 'logwarn', 'logerror', 'logcrit']}
${'WARN'}   |${['logwarn', 'logerror', 'logcrit']}
${'ERROR'}  |${['logerror', 'logcrit']}
${'CRIT'}   |${['logcrit']}
${'OTHER'}  |${['logcrit']} // logcrit is always enabled, if LOGLEVEL is not part of supported values
    `("If LOGLEVEL=$LOGLEVEL then $expectedLogMethods methods are active", (args) => {
    const LOGLEVEL = args.LOGLEVEL;
    const expectedLogMethods = args.expectedLogMethods;
    //ARRANGE
    process.env.LOGLEVEL = LOGLEVEL;
    const log = new log_1.Log(testCorrelationToken);
    // ACT
    log.debug(testLogMessage);
    log.info(testLogMessage);
    log.warn(testLogMessage);
    log.error(testLogMessage);
    log.crit(testLogMessage);
    // ASSERT logdebug
    if ((expectedLogMethods).includes('logdebug')) {
        (0, globals_1.expect)(console.log).toBeCalledTimes(1);
        (0, globals_1.expect)(console.log).toBeCalledWith(globals_1.expect.objectContaining({ timestamp: globals_1.expect.any(Number), "data": `'${testLogMessage}'`, "correlation": testCorrelationToken, "level": "DEBUG" }));
    }
    else {
        (0, globals_1.expect)(console.log).toBeCalledTimes(0);
    }
    // ASSERT loginfo
    if ((expectedLogMethods).includes('loginfo')) {
        (0, globals_1.expect)(console.info).toBeCalledTimes(1);
        (0, globals_1.expect)(console.info).toBeCalledWith(globals_1.expect.objectContaining({ timestamp: globals_1.expect.any(Number), "data": `'${testLogMessage}'`, "correlation": testCorrelationToken, "level": "INFO" }));
    }
    else {
        (0, globals_1.expect)(console.info).toBeCalledTimes(0);
    }
    // ASSERT logwarn
    if ((expectedLogMethods).includes('logwarn')) {
        (0, globals_1.expect)(console.warn).toBeCalledTimes(1);
        (0, globals_1.expect)(console.warn).toBeCalledWith(globals_1.expect.objectContaining({ timestamp: globals_1.expect.any(Number), "data": `'${testLogMessage}'`, "correlation": testCorrelationToken, "level": "WARN" }));
    }
    else {
        (0, globals_1.expect)(console.warn).toBeCalledTimes(0);
    }
    // ASSERT logerror
    let expectedConsoleErrCalls = 0;
    if (expectedLogMethods.includes('logerror')) {
        expectedConsoleErrCalls += 1;
    }
    if (expectedLogMethods.includes('logcrit')) {
        expectedConsoleErrCalls += 1;
    }
    (0, globals_1.expect)(console.error).toBeCalledTimes(expectedConsoleErrCalls);
    if ((expectedLogMethods).includes('logerror')) {
        (0, globals_1.expect)(console.error).toBeCalledWith(globals_1.expect.objectContaining({ timestamp: globals_1.expect.any(Number), "data": `'${testLogMessage}'`, "correlation": testCorrelationToken, "level": "ERROR" }));
    }
    // ASSERT logcrit
    if ((expectedLogMethods).includes('logcrit')) {
        (0, globals_1.expect)(console.error).toBeCalledWith(globals_1.expect.objectContaining({ timestamp: globals_1.expect.any(Number), "data": `'${testLogMessage}'`, "correlation": testCorrelationToken, "level": "CRIT" }));
    }
});
(0, globals_1.test)("if not set_correlation_token prior log* call 'UNKNOWN' is used", () => {
    const log = new log_1.Log(undefined); // no correlation_id is set
    log.warn(testLogMessage);
    (0, globals_1.expect)(console.warn).toBeCalledTimes(1);
    (0, globals_1.expect)(console.warn).lastCalledWith(globals_1.expect.objectContaining({ timestamp: globals_1.expect.any(Number), "data": `'${testLogMessage}'`, "correlation": "UNKNOWN", "level": "WARN" }));
});
(0, globals_1.test)("if not LOGLEVEL default level is WARN", () => {
    process.env.LOGLEVEL = undefined;
    const log = new log_1.Log({ correlation_id: undefined }); // no correlation_id is set
    log.debug(testLogMessage);
    log.info(testLogMessage);
    log.warn(testLogMessage);
    log.error(testLogMessage);
    log.crit(testLogMessage);
    (0, globals_1.expect)(console.info).toBeCalledTimes(0);
    (0, globals_1.expect)(console.log).toBeCalledTimes(0);
    (0, globals_1.expect)(console.warn).toBeCalledTimes(1);
    (0, globals_1.expect)(console.error).toBeCalledTimes(2); //1 for error, 1 for crit
    (0, globals_1.expect)(console.warn).nthCalledWith(1, globals_1.expect.objectContaining({ timestamp: globals_1.expect.any(Number), "data": `'${testLogMessage}'`, "correlation": "UNKNOWN", "level": "WARN" }));
    (0, globals_1.expect)(console.error).nthCalledWith(1, globals_1.expect.objectContaining({ timestamp: globals_1.expect.any(Number), "data": `'${testLogMessage}'`, "correlation": "UNKNOWN", "level": "ERROR" }));
    (0, globals_1.expect)(console.error).nthCalledWith(2, globals_1.expect.objectContaining({ timestamp: globals_1.expect.any(Number), "data": `'${testLogMessage}'`, "correlation": "UNKNOWN", "level": "CRIT" }));
});
const expectedCorrelationToken = 'THE TEST CORELLATION ID';
(0, globals_1.describe)('setting correlation id', () => {
    (0, globals_1.test)('by passing plain string', () => {
        const log = new log_1.Log(expectedCorrelationToken);
        (0, globals_1.expect)(log.correlation_id).toBe(expectedCorrelationToken);
    });
    (0, globals_1.test)('by passing object contining `correlation_id: sting`', () => {
        const log = new log_1.Log({ correlation_id: expectedCorrelationToken, someOtherProp: 'will not be used' });
        (0, globals_1.expect)(log.correlation_id).toBe(expectedCorrelationToken);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2cuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUF5RTtBQUN6RSxvQ0FBaUM7QUFFakMsOEJBQThCO0FBQzlCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBQ3pCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFBO0FBRXhCLE1BQU0sY0FBYyxHQUFHLDBCQUEwQixDQUFBO0FBQ2pELE1BQU0sb0JBQW9CLEdBQUcsd0JBQXdCLENBQUE7QUFDckQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQTtBQUV2QixJQUFBLG9CQUFVLEVBQUMsR0FBRyxFQUFFO0lBQ1osT0FBTyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUE7QUFDNUIsQ0FBQyxDQUFDLENBQUE7QUFFRixjQUFJLENBQUMsSUFBSSxDQUFBOztFQUVQLE9BQU8sTUFBTSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUM7RUFDdEUsTUFBTSxPQUFPLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDO0VBQzFELE1BQU0sT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDO0VBQy9DLE9BQU8sTUFBTSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUM7RUFDcEMsTUFBTSxPQUFPLENBQUMsU0FBUyxDQUFDO0VBQ3hCLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQztLQUNyQixDQUFDLG1FQUFtRSxFQUNyRSxDQUFDLElBQUks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